const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const QRCode = require('qrcode');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Middleware
app.use(express.static('public'));
app.use(express.json());

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function loadDatabase() {
    try {
        const data = fs.readFileSync('database.json', 'utf8');
        return JSON.parse(data);
    } catch (error) {
        return { sessions: {}, authKeys: {}, users: {}, longTermSessions: {} };
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function saveDatabase(db) {
    fs.writeFileSync('database.json', JSON.stringify(db, null, 2));
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
function createLongTermSession(userData) {
    const sessionToken = uuidv4();
    const expiresAt = Date.now() + (24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    
    const longTermSession = {
        token: sessionToken,
        phone: userData.phone,
        name: userData.name,
        telegramUserId: userData.telegramUserId,
        createdAt: Date.now(),
        expiresAt: expiresAt,
        lastActivity: Date.now()
    };
    
    return { sessionToken, longTermSession };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
function validateLongTermSession(token) {
    const db = loadDatabase();
    const session = db.longTermSessions[token];
    
    if (!session) {
        return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
    if (Date.now() > session.expiresAt) {
        delete db.longTermSessions[token];
        saveDatabase(db);
        return null;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    session.lastActivity = Date.now();
    saveDatabase(db);
    
    return session;
}

// –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
function extendLongTermSession(token) {
    const db = loadDatabase();
    const session = db.longTermSessions[token];
    
    if (session) {
        session.expiresAt = Date.now() + (24 * 60 * 60 * 1000); // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ 24 —á–∞—Å–∞
        session.lastActivity = Date.now();
        saveDatabase(db);
        return true;
    }
    
    return false;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ socket ID
function getSessionBySocketId(socketId) {
    const db = loadDatabase();
    for (const [sessionId, session] of Object.entries(db.sessions)) {
        if (session.socketId === socketId) {
            return { sessionId, session };
        }
    }
    return null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO
io.on('connection', (socket) => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    socket.on('checkAuth', (data) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ localStorage
        if (data && data.sessionToken) {
            const longTermSession = validateLongTermSession(data.sessionToken);
            if (longTermSession) {
                socket.emit('alreadyAuthorized', {
                    phone: longTermSession.phone,
                    name: longTermSession.name,
                    sessionToken: longTermSession.token
                });
                return;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—É—é —Å–µ—Å—Å–∏—é
        const sessionData = getSessionBySocketId(socket.id);
        if (sessionData && sessionData.session.authorized) {
            socket.emit('alreadyAuthorized', {
                phone: sessionData.session.phone,
                name: sessionData.session.name
            });
        }
    });

    // –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    socket.on('requestAuth', async (data) => {
        const { phone } = data;
        const db = loadDatabase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
        const existingUser = Object.values(db.users).find(user => user.phone === phone);
        
        if (existingUser) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram
            const smsCode = Math.floor(1000 + Math.random() * 9000).toString();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            db.smsCodes = db.smsCodes || {};
            db.smsCodes[phone] = {
                code: smsCode,
                timestamp: Date.now(),
                used: false,
                socketId: socket.id
            };
            
            saveDatabase(db);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (existingUser.telegramUserId) {
                bot.sendMessage(existingUser.telegramUserId, 
                    `üîê –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${smsCode}\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`
                );
                console.log(`–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${existingUser.telegramUserId}: ${smsCode}`);
            }
            
            socket.emit('smsCodeSent', { phone });
            return;
        }
        
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
        const authKey = uuidv4().substring(0, 8);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        db.authKeys[authKey] = {
            phone: phone,
            socketId: socket.id,
            timestamp: Date.now(),
            used: false
        };
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        const sessionId = uuidv4();
        db.sessions[sessionId] = {
            socketId: socket.id,
            phone: phone,
            authorized: false,
            timestamp: Date.now()
        };
        
        saveDatabase(db);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        const botUsername = 'autor1z_bot'; // Username –±–æ—Ç–∞ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
        const authLink = `https://t.me/${botUsername}?start=${authKey}`;
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            const qrCodeDataURL = await QRCode.toDataURL(authLink, {
                width: 300,
                margin: 2,
                color: {
                    dark: '#000000',
                    light: '#FFFFFF'
                }
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É
            socket.emit('authKey', { 
                key: authKey, 
                link: authLink,
                qrCode: qrCodeDataURL
            });
            
            console.log(`–°–æ–∑–¥–∞–Ω –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authKey} –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}`);
            console.log(`–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authLink}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            socket.emit('authKey', { 
                key: authKey, 
                link: authLink
            });
        }
    });

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    socket.on('logout', () => {
        const sessionData = getSessionBySocketId(socket.id);
        if (sessionData) {
            const db = loadDatabase();
            delete db.sessions[sessionData.sessionId];
            saveDatabase(db);
            socket.emit('logoutSuccess');
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã: ${socket.id}`);
        }
    });

    // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    socket.on('resetSession', () => {
        const sessionData = getSessionBySocketId(socket.id);
        if (sessionData) {
            const db = loadDatabase();
            const phone = sessionData.session.phone;
            
            // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
            delete db.sessions[sessionData.sessionId];
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É
            const user = Object.values(db.users).find(u => u.phone === phone);
            
            if (user && user.telegramUserId) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                const smsCode = Math.floor(1000 + Math.random() * 9000).toString();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                db.smsCodes = db.smsCodes || {};
                db.smsCodes[phone] = {
                    code: smsCode,
                    timestamp: Date.now(),
                    used: false,
                    socketId: socket.id
                };
                
                saveDatabase(db);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram
                bot.sendMessage(user.telegramUserId, 
                    `üîÑ –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏\n\n` +
                    `–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${smsCode}\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`
                );
                
                console.log(`–ö–æ–¥ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramUserId}: ${smsCode}`);
            }
            
            socket.emit('sessionReset');
            socket.emit('smsCodeSent', { phone });
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    socket.on('verifyCode', (data) => {
        const { code } = data;
        const db = loadDatabase();
        
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥
        for (const [phone, codeData] of Object.entries(db.smsCodes || {})) {
            if (!codeData.used && 
                codeData.code === code && 
                codeData.socketId === socket.id) {
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–æ–¥ (5 –º–∏–Ω—É—Ç)
                const now = Date.now();
                const fiveMinutes = 5 * 60 * 1000;
                
                if (now - codeData.timestamp > fiveMinutes) {
                    socket.emit('authError', '–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.');
                    return;
                }
                
                // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                codeData.used = true;
                
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const user = Object.values(db.users).find(u => u.phone === phone);
                
                if (user) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    const sessionId = uuidv4();
                    db.sessions[sessionId] = {
                        socketId: socket.id,
                        phone: phone,
                        authorized: true,
                        name: user.name,
                        telegramUserId: user.telegramUserId,
                        timestamp: Date.now()
                    };
                    
                    saveDatabase(db);
                    
                    // –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
                    const userData = {
                        phone: phone,
                        name: user.name,
                        telegramUserId: user.telegramUserId
                    };
                    
                    const { sessionToken, longTermSession } = createLongTermSession(userData);
                    db.longTermSessions[sessionToken] = longTermSession;
                    saveDatabase(db);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    socket.emit('authSuccess', {
                        phone: phone,
                        name: user.name,
                        sessionToken: sessionToken
                    });
                    
                    console.log(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–¥—É —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${phone} (${user.name})`);
                    return;
                }
            }
        }
        
        // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
        socket.emit('authError', '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.');
    });

    // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
    socket.on('extendSession', (data) => {
        if (data && data.sessionToken) {
            const extended = extendLongTermSession(data.sessionToken);
            if (extended) {
                socket.emit('sessionExtended', { success: true });
                console.log(`–°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${data.sessionToken}`);
            } else {
                socket.emit('sessionExtended', { success: false });
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Telegram –±–æ—Ç–µ
bot.on('contact', (msg) => {
    const contact = msg.contact;
    let phoneNumber = contact.phone_number;
    const userId = msg.from.id;
    const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–±–∞–≤–ª—è–µ–º + –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    if (!phoneNumber.startsWith('+')) {
        phoneNumber = '+' + phoneNumber;
    }
    
    console.log(`–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${phoneNumber}`);
    
    const db = loadDatabase();
    
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [authKey, authData] of Object.entries(db.authKeys)) {
        if (!authData.used && 
            authData.telegramUserId === userId && 
            authData.phone === phoneNumber) {
            
            // –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            authData.used = true;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            const sessionData = getSessionBySocketId(authData.socketId);
            if (sessionData) {
                db.sessions[sessionData.sessionId].authorized = true;
                db.sessions[sessionData.sessionId].name = userName;
                db.sessions[sessionData.sessionId].telegramUserId = userId;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.users[userId] = {
                    phone: phoneNumber,
                    name: userName,
                    telegramUserId: userId,
                    lastAuth: Date.now()
                };
                
                saveDatabase(db);
                
                    // –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
                    const userData = {
                        phone: phoneNumber,
                        name: userName,
                        telegramUserId: userId
                    };
                    
                    const { sessionToken, longTermSession } = createLongTermSession(userData);
                    db.longTermSessions[sessionToken] = longTermSession;
                    saveDatabase(db);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    io.to(authData.socketId).emit('authSuccess', {
                        phone: phoneNumber,
                        name: userName,
                        sessionToken: sessionToken
                    });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram
                bot.sendMessage(userId, `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!`);
                
                console.log(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${phoneNumber} (${userName})`);
                return;
            }
        }
    }
    
    // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    bot.sendMessage(userId, 
        `‚ùå –ù–æ–º–µ—Ä ${phoneNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n` +
        `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n` +
        `1. –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞\n` +
        `2. –ù–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ\n` +
        `3. –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç)`
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
bot.onText(/\/start (.+)/, (msg, match) => {
    const userId = msg.from.id;
    const authKey = match[1];
    const db = loadDatabase();
    
    console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–ª—é—á–æ–º: ${authKey} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
    if (db.authKeys[authKey] && !db.authKeys[authKey].used) {
        const authData = db.authKeys[authKey];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        db.authKeys[authKey].telegramUserId = userId;
        db.authKeys[authKey].telegramUsername = msg.from.username;
        saveDatabase(db);
        
        // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        const keyboard = {
            reply_markup: {
                keyboard: [
                    [{
                        text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
                        request_contact: true
                    }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        };

        bot.sendMessage(userId, 
            `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n` +
            `–ö–ª—é—á: ${authKey}\n` +
            `–û–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä: ${authData.phone}\n\n` +
            `–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`,
            keyboard
        );
    } else {
        bot.sendMessage(userId, 
            `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n` +
            `–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ`
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
bot.onText(/\/start$/, (msg) => {
    const userId = msg.from.id;
    bot.sendMessage(userId, 
        `ü§ñ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n` +
        `–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞\n\n` +
        `–í–∞—à ID: ${userId}`
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ SMS –∫–æ–¥—ã)
bot.on('message', (msg) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    if (msg.text && msg.text.startsWith('/')) return;
    if (msg.contact) return;
    
    const userId = msg.from.id;
    const messageText = msg.text;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ SMS –∫–æ–¥–æ–º (4 —Ü–∏—Ñ—Ä—ã)
    if (messageText && messageText.match(/^\d{4}$/)) {
        const smsCode = messageText;
        console.log(`–ü–æ–ª—É—á–µ–Ω SMS –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${smsCode}`);
        
        const db = loadDatabase();
        
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π SMS –∫–æ–¥
        for (const [phone, codeData] of Object.entries(db.smsCodes || {})) {
            if (!codeData.used && codeData.code === smsCode) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–æ–¥ (5 –º–∏–Ω—É—Ç)
                const now = Date.now();
                const fiveMinutes = 5 * 60 * 1000;
                
                if (now - codeData.timestamp > fiveMinutes) {
                    bot.sendMessage(userId, `‚ùå SMS –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.`);
                    continue;
                }
                
                // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                codeData.used = true;
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                const sessionId = uuidv4();
                db.sessions[sessionId] = {
                    socketId: null, // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ socket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    phone: phone,
                    authorized: true,
                    name: msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : ''),
                    telegramUserId: userId,
                    timestamp: Date.now()
                };
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                db.users[userId] = {
                    phone: phone,
                    name: msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : ''),
                    telegramUserId: userId,
                    lastAuth: Date.now()
                };
                
                saveDatabase(db);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram
                bot.sendMessage(userId, `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${msg.from.first_name}!`);
                
                console.log(`SMS –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${phone} (${msg.from.first_name})`);
                return;
            }
        }
        
        // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
        bot.sendMessage(userId, 
            `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥.\n\n` +
            `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n` +
            `1. –ö–æ–¥ –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (4 —Ü–∏—Ñ—Ä—ã)\n` +
            `2. –ö–æ–¥ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç)\n` +
            `3. –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ`
        );
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (messageText && messageText.match(/^\+?[1-9]\d{1,14}$/)) {
        const phoneNumber = messageText.startsWith('+') ? messageText : '+' + messageText;
        
        console.log(`–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${phoneNumber}`);
        
        const db = loadDatabase();
        
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const [authKey, authData] of Object.entries(db.authKeys)) {
            if (!authData.used && 
                authData.telegramUserId === userId && 
                authData.phone === phoneNumber) {
                
                // –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                authData.used = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                const sessionData = getSessionBySocketId(authData.socketId);
                if (sessionData) {
                    db.sessions[sessionData.sessionId].authorized = true;
                    db.sessions[sessionData.sessionId].name = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
                    db.sessions[sessionData.sessionId].telegramUserId = userId;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    db.users[userId] = {
                        phone: phoneNumber,
                        name: msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : ''),
                        telegramUserId: userId,
                        lastAuth: Date.now()
                    };
                    
                    saveDatabase(db);
                    
                    // –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
                    const userData = {
                        phone: phoneNumber,
                        name: msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : ''),
                        telegramUserId: userId
                    };
                    
                    const { sessionToken, longTermSession } = createLongTermSession(userData);
                    db.longTermSessions[sessionToken] = longTermSession;
                    saveDatabase(db);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    io.to(authData.socketId).emit('authSuccess', {
                        phone: phoneNumber,
                        name: msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : ''),
                        sessionToken: sessionToken
                    });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram
                    bot.sendMessage(userId, `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`);
                    
                    console.log(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${phoneNumber} (${msg.from.first_name})`);
                    return;
                }
            }
        }
        
        // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        bot.sendMessage(userId, 
            `‚ùå –ù–æ–º–µ—Ä ${phoneNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n` +
            `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n` +
            `1. –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞\n` +
            `2. –ù–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ\n` +
            `3. –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç)`
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling Telegram –±–æ—Ç–∞:', error);
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ SMS –∫–æ–¥–æ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
setInterval(() => {
    const db = loadDatabase();
    const now = Date.now();
    const fiveMinutes = 5 * 60 * 1000;
    
    let cleaned = false;
    
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–ª—é—á–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    for (const [authKey, authData] of Object.entries(db.authKeys)) {
        if (now - authData.timestamp > fiveMinutes) {
            delete db.authKeys[authKey];
            cleaned = true;
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö SMS –∫–æ–¥–æ–≤
    if (db.smsCodes) {
        for (const [phone, codeData] of Object.entries(db.smsCodes)) {
            if (now - codeData.timestamp > fiveMinutes) {
                delete db.smsCodes[phone];
                cleaned = true;
            }
        }
    }
    
    if (cleaned) {
        saveDatabase(db);
        console.log('–û—á–∏—â–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ SMS –∫–æ–¥—ã');
    }
}, 5 * 60 * 1000);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    bot.stopPolling();
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});

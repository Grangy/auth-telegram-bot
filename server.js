const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const { v4: uuidv4 } = require('uuid');
const QRCode = require('qrcode');

// –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
const config = require('./src/config/config');
const logger = require('./src/utils/logger');
const DatabaseService = require('./src/services/DatabaseService');
const TelegramService = require('./src/services/TelegramService');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const databaseService = new DatabaseService(config.database.path);
const telegramService = new TelegramService();

// Middleware
app.use(express.static('public'));
app.use(express.json());

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
function createLongTermSession(userData) {
    const sessionToken = uuidv4();
    const expiresAt = Date.now() + config.session.maxAge;
    
    const longTermSession = {
        token: sessionToken,
        phone: userData.phone,
        name: userData.name,
        telegramUserId: userData.telegramUserId,
        createdAt: Date.now(),
        expiresAt: expiresAt
    };
    
    return { sessionToken, longTermSession };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ socket ID
function getSessionBySocketId(socketId) {
    const db = databaseService.loadDatabase();
    for (const [sessionId, session] of Object.entries(db.sessions || {})) {
        if (session.socketId === socketId) {
            return { sessionId, session };
        }
    }
    return null;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO
io.on('connection', (socket) => {
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è', { socketId: socket.id });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è', { socketId: socket.id });
        
        // –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        const sessionData = getSessionBySocketId(socket.id);
        if (sessionData) {
            logger.info(`–°–µ—Å—Å–∏—è ${sessionData.sessionId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    socket.on('checkAuth', (data) => {
        if (data && data.sessionToken) {
            const db = databaseService.loadDatabase();
            const longTermSession = db.longTermSessions?.[data.sessionToken];
            
            if (longTermSession && longTermSession.expiresAt > Date.now()) {
                socket.emit('alreadyAuthorized', {
                    phone: longTermSession.phone,
                    name: longTermSession.name
                });
                return;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—É—é —Å–µ—Å—Å–∏—é
        const sessionData = getSessionBySocketId(socket.id);
        if (sessionData && sessionData.session.authorized) {
            socket.emit('alreadyAuthorized', {
                phone: sessionData.session.phone,
                name: sessionData.session.name
            });
        }
    });

    // –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    socket.on('requestAuth', async (data) => {
        try {
            const { phone } = data;
            if (!phone) {
                socket.emit('authError', { message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
                return;
            }
            
            logger.info(`–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${phone}`);
            
            const db = databaseService.loadDatabase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
            const existingUser = Object.values(db.users || {}).find(user => user.phone === phone);
            
            if (existingUser && existingUser.telegramUserId) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥
                const smsCode = Math.floor(1000 + Math.random() * 9000).toString();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if (!db.smsCodes) db.smsCodes = {};
                db.smsCodes[phone] = {
                    code: smsCode,
                    timestamp: Date.now(),
                    used: false,
                    socketId: socket.id
                };
                
                databaseService.saveDatabase(db);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram
                await telegramService.sendMessage(existingUser.telegramUserId, 
                    `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n` +
                    `–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${smsCode}\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`
                );
                
                socket.emit('smsCodeSent', { phone });
                logger.info(`SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${existingUser.telegramUserId}: ${smsCode}`);
                return;
            }
            
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
            const authKey = uuidv4().substring(0, 8);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (!db.authKeys) db.authKeys = {};
            db.authKeys[authKey] = {
                phone: phone,
                socketId: socket.id,
                timestamp: Date.now(),
                used: false
            };
            
            // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            const sessionId = uuidv4();
            if (!db.sessions) db.sessions = {};
            db.sessions[sessionId] = {
                socketId: socket.id,
                phone: phone,
                authorized: false,
                timestamp: Date.now()
            };
            
            databaseService.saveDatabase(db);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const authLink = `https://t.me/${config.botUsername || 'your_bot'}?start=${authKey}`;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            QRCode.toDataURL(authLink, (error, qrCodeDataURL) => {
                if (error) {
                    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
                    socket.emit('authKey', { 
                        key: authKey, 
                        link: authLink
                    });
                } else {
                    socket.emit('authKey', { 
                        key: authKey, 
                        link: authLink,
                        qrCode: qrCodeDataURL
                    });
                }
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤ requestAuth:', error);
            socket.emit('authError', { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...
    // (–∫–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
setInterval(() => {
    databaseService.cleanupOldSessions();
}, config.session.cleanupInterval);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(config.port, () => {
    logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
    logger.info(`üì± Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω`);
    logger.info(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${config.port} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    telegramService.stopPolling();
    server.close(() => {
        logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});

module.exports = { app, server, io };

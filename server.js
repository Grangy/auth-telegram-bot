const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const { v4: uuidv4 } = require('uuid');
const QRCode = require('qrcode');

// –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
const config = require('./src/config/config');
const logger = require('./src/utils/logger');
const PrismaService = require('./src/services/PrismaService');
const CacheService = require('./src/services/CacheService');
const TelegramService = require('./src/services/TelegramService');
const StartupChecklist = require('./src/utils/startupChecklist');
const SystemChecks = require('./src/utils/systemChecks');
const errorHandler = require('./src/middleware/errorHandler');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const shouldClearDatabase = args.includes('--clear-db') || args.includes('--clear-database');
const shouldResetUsers = args.includes('--reset-users');
const shouldResetAll = args.includes('--reset-all');

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üöÄ Telegram Authorization Server

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node server.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --clear-db, --clear-database    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  --reset-users                   –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–µ—Å—Å–∏–∏
  --reset-all                     –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–∞–Ω–∞–ª–æ–≥ --clear-db)
  --help, -h                      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node server.js                  # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
  node server.js --clear-db       # –û—á–∏—Å—Ç–∏—Ç—å –ë–î –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å
  node server.js --reset-users    # –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  node server.js --help           # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
`);
    process.exit(0);
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if (shouldClearDatabase || shouldResetUsers || shouldResetAll) {
    console.log('üßπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:');
    if (shouldClearDatabase || shouldResetAll) {
        console.log('   - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    if (shouldResetUsers) {
        console.log('   - –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    console.log('');
}

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
let prismaService, cacheService, telegramService;
let systemChecks, startupChecklist;

// –ë–æ—Ç –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
let bot;

// Middleware
app.use(express.static('public'));
app.use(express.json());

// Health check endpoint
app.get('/health', async (req, res) => {
    try {
        const health = {
            status: 'ok',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            services: {
                database: false,
                cache: false,
                telegram: false
            }
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
            if (prismaService) {
                // –î–ª—è MongoDB –∏—Å–ø–æ–ª—å–∑—É–µ–º findFirst –≤–º–µ—Å—Ç–æ $queryRaw
                await prismaService.prisma.user.findFirst({ 
                    take: 1,
                    select: { id: true }
                });
                health.services.database = true;
            } else {
                health.services.database = false;
            }
        } catch (error) {
            health.services.database = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        try {
            if (cacheService) {
                const cacheStatus = cacheService.getCacheStatus();
                health.services.cache = cacheStatus.isConnected;
            }
        } catch (error) {
            health.services.cache = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞
        try {
            if (telegramService && bot) {
                const botInfo = await bot.getMe();
                health.services.telegram = !!botInfo;
            }
        } catch (error) {
            health.services.telegram = false;
        }

        const allServicesOk = Object.values(health.services).every(status => status);
        res.status(allServicesOk ? 200 : 503).json(health);
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
function normalizePhoneNumber(phone) {
    if (!phone) return '';
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    let cleaned = phone.replace(/[^\d+]/g, '');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug(`–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞: "${phone}" -> "${cleaned}"`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ - –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if (cleaned.startsWith('8') && cleaned.length === 11) {
        // 8XXXXXXXXXX -> +7XXXXXXXXXX
        cleaned = '+7' + cleaned.substring(1);
    } else if (cleaned.startsWith('7') && !cleaned.startsWith('+7') && cleaned.length === 11) {
        // 7XXXXXXXXXX -> +7XXXXXXXXXX
        cleaned = '+' + cleaned;
    } else if (cleaned.startsWith('+7') && cleaned.length === 12) {
        // +7XXXXXXXXXX -> –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
        cleaned = cleaned;
    } else if (cleaned.startsWith('9') && cleaned.length === 10) {
        // 9XXXXXXXXX -> +79XXXXXXXXX (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
        cleaned = '+7' + cleaned;
    } else if (cleaned.startsWith('978') && cleaned.length === 11) {
        // 978XXXXXXXX -> +7978XXXXXXXX (—É–∂–µ –µ—Å—Ç—å –∫–æ–¥ 7, –¥–æ–±–∞–≤–ª—è–µ–º +)
        cleaned = '+' + cleaned;
    } else if (cleaned.length > 0 && !cleaned.startsWith('+')) {
        // –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä -> –¥–æ–±–∞–≤–ª—è–µ–º +
        cleaned = '+' + cleaned;
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if (cleaned.startsWith('+7') && cleaned.length === 12) {
        logger.debug(`–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: "${cleaned}"`);
        return cleaned;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    logger.warn(`–ù–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: "${phone}" -> "${cleaned}"`);
    return cleaned;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
function createLongTermSession(userData) {
    const sessionToken = uuidv4();
    const expiresAt = new Date(Date.now() + config.session.maxAge);
    
    return {
        token: sessionToken,
        phone: userData.phone,
        name: userData.name,
        telegramUserId: userData.telegramUserId,
        createdAt: new Date(),
        expiresAt: expiresAt
    };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ socket ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function getSessionBySocketId(socketId) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        let session = await cacheService.getSessionBySocketId(socketId);
        
        if (!session) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session = await prismaService.findSessionBySocketId(socketId);
            
            if (session) {
                // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à
                await cacheService.warmSessionCache(session);
            }
        }
        
        return session;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        return null;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO
io.on('connection', (socket) => {
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è', { socketId: socket.id });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', async () => {
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è', { socketId: socket.id });
        
        // –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        const sessionData = await getSessionBySocketId(socket.id);
        if (sessionData) {
            logger.info(`–°–µ—Å—Å–∏—è ${sessionData.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    socket.on('checkAuth', async (data) => {
        try {
            logger.info(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è socket ${socket.id}:`, { hasData: !!data, hasSessionToken: !!(data && data.sessionToken) });
            if (data && data.sessionToken) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
                let longTermSession = null;
                
                try {
                    longTermSession = await cacheService.getLongTermSession(data.sessionToken);
                } catch (error) {
                    logger.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ –∫—ç—à–∞:', error);
                }
                
                if (!longTermSession) {
                    try {
                        longTermSession = await prismaService.findLongTermSession(data.sessionToken);
                        if (longTermSession) {
                            await cacheService.setLongTermSession(data.sessionToken, longTermSession);
                        }
                    } catch (error) {
                        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ –ë–î:', error);
                    }
                }
                
                if (longTermSession && new Date(longTermSession.expiresAt) > new Date()) {
                    logger.info(`–ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è ${longTermSession.phone}, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${longTermSession.expiresAt}`);
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ socket —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
                    const sessionExpiresAt = new Date(Date.now() + config.session.maxAge);
                    
                    try {
                        await prismaService.createSession({
                            socketId: socket.id,
                            phone: longTermSession.phone,
                            authorized: true,
                            name: longTermSession.name,
                            telegramUserId: longTermSession.telegramUserId,
                            expiresAt: sessionExpiresAt
                        });
                        
                        // –ö—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                        await cacheService.warmSessionCache({
                            socketId: socket.id,
                            phone: longTermSession.phone,
                            authorized: true,
                            name: longTermSession.name,
                            telegramUserId: longTermSession.telegramUserId,
                            expiresAt: sessionExpiresAt
                        });
                        
                        socket.emit('alreadyAuthorized', {
                            phone: longTermSession.phone,
                            name: longTermSession.name,
                            sessionToken: data.sessionToken
                        });
                        logger.info(`–°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${longTermSession.phone} —Å socket ${socket.id}`);
                        return;
                    } catch (error) {
                        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
                        socket.emit('authError', { message: '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏' });
                        return;
                    }
                } else {
                    logger.info(`–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞:`, { 
                        found: !!longTermSession, 
                        expiresAt: longTermSession?.expiresAt,
                        currentTime: new Date(),
                        isExpired: longTermSession ? new Date() > new Date(longTermSession.expiresAt) : true
                    });
                    
                    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                    if (longTermSession && new Date() > new Date(longTermSession.expiresAt)) {
                        try {
                            await prismaService.deleteLongTermSession(data.sessionToken);
                            await cacheService.invalidateLongTermSession(data.sessionToken);
                            logger.info(`–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞: ${data.sessionToken}`);
                        } catch (error) {
                            logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π —Å–µ—Å—Å–∏–∏:', error);
                        }
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—É—é —Å–µ—Å—Å–∏—é
            const sessionData = await getSessionBySocketId(socket.id);
            if (sessionData && sessionData.authorized) {
                socket.emit('alreadyAuthorized', {
                    phone: sessionData.phone,
                    name: sessionData.name
                });
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        }
    });

    // –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    socket.on('requestAuth', async (data) => {
        try {
            const { phone } = data;
            if (!phone) {
                socket.emit('authError', { message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
                return;
            }
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const normalizedPhone = normalizePhoneNumber(phone);
            logger.info(`–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let user = await cacheService.getUserByPhone(normalizedPhone);
            
            if (!user) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                user = await prismaService.findUserByPhone(normalizedPhone);
                
                if (user) {
                    // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à
                    await cacheService.warmUserCache(user);
                }
            }
            
            if (user && user.telegramUserId) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥
                const smsCode = Math.floor(1000 + Math.random() * 9000).toString();
                const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await prismaService.createSmsCode({
                    phone: normalizedPhone,
                    code: smsCode,
                    socketId: socket.id,
                    expiresAt: expiresAt
                });
                
                // –ö—ç—à–∏—Ä—É–µ–º –∫–æ–¥
                await cacheService.setSmsCode(normalizedPhone, {
                    code: smsCode,
                    socketId: socket.id,
                    expiresAt: expiresAt
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram
                await telegramService.sendMessage(user.telegramUserId, 
                    `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n` +
                    `–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${smsCode}\n\n` +
                    `–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`
                );
                
                socket.emit('smsCodeSent', { phone: normalizedPhone });
                logger.info(`SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramUserId}: ${smsCode}`);
                return;
            }
            
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
            const authKey = uuidv4().substring(0, 8);
            const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await prismaService.createAuthKey({
                key: authKey,
                phone: normalizedPhone,
                socketId: socket.id,
                expiresAt: expiresAt
            });
            
            // –ö—ç—à–∏—Ä—É–µ–º –∫–ª—é—á
            await cacheService.setAuthKey(authKey, {
                phone: normalizedPhone,
                socketId: socket.id,
                expiresAt: expiresAt
            });
            
            // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            const sessionExpiresAt = new Date(Date.now() + config.session.maxAge);
            await prismaService.createSession({
                socketId: socket.id,
                phone: normalizedPhone,
                authorized: false,
                expiresAt: sessionExpiresAt
            });
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const botUsername = config.botUsername || 'autor1z_bot';
            const authLink = `https://t.me/${botUsername}?start=${authKey}`;
            
            logger.info(`–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authLink}`);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            QRCode.toDataURL(authLink, (error, qrCodeDataURL) => {
                if (error) {
                    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
                    socket.emit('authKey', { 
                        key: authKey, 
                        link: authLink
                    });
                } else {
                    socket.emit('authKey', { 
                        key: authKey, 
                        link: authLink,
                        qrCode: qrCodeDataURL
                    });
                }
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤ requestAuth:', error);
            socket.emit('authError', { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    socket.on('verifyCode', async (data) => {
        try {
            const { phone, code } = data;
            if (!phone || !code) {
                socket.emit('authError', { message: '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–æ–¥' });
                return;
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const normalizedPhone = normalizePhoneNumber(phone);
            logger.info(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}, –∫–æ–¥: ${code}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à SMS –∫–æ–¥–∞
            let codeData = await cacheService.getSmsCode(normalizedPhone);
            logger.debug(`–î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è ${normalizedPhone}:`, codeData);
            
            if (!codeData) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                logger.debug(`–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –ë–î –¥–ª—è ${normalizedPhone}`);
                codeData = await prismaService.findSmsCode(normalizedPhone);
                logger.debug(`–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è ${normalizedPhone}:`, codeData);
            }
            
            if (!codeData) {
                logger.warn(`SMS –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);
                socket.emit('authError', { message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' });
                return;
            }

            if (codeData.used) {
                logger.warn(`SMS –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);
                socket.emit('authError', { message: '–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–æ–¥
            if (new Date() > codeData.expiresAt) {
                logger.warn(`SMS –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);
                socket.emit('authError', { message: '–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–∞
            logger.debug(`–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –¥–ª—è ${normalizedPhone}:`, {
                expected: codeData.code,
                received: code,
                expectedType: typeof codeData.code,
                receivedType: typeof code,
                areEqual: codeData.code === code,
                strictEqual: codeData.code === code
            });
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫)
            const normalizedCode = code.toString().trim();
            const normalizedExpectedCode = codeData.code.toString().trim();
            
            logger.debug(`–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:`, {
                expected: normalizedExpectedCode,
                received: normalizedCode,
                areEqual: normalizedExpectedCode === normalizedCode
            });
            
            if (normalizedExpectedCode !== normalizedCode) {
                logger.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}. –û–∂–∏–¥–∞–ª—Å—è: "${normalizedExpectedCode}", –ø–æ–ª—É—á–µ–Ω: "${normalizedCode}"`);
                socket.emit('authError', { message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });
                return;
            }

            logger.info(`–ö–æ–¥ –≤–µ—Ä–Ω—ã–π –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);

            // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            await prismaService.markSmsCodeAsUsed(normalizedPhone);
            await cacheService.invalidateSmsCode(normalizedPhone);

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let user = await cacheService.getUserByPhone(normalizedPhone);
            if (!user) {
                user = await prismaService.findUserByPhone(normalizedPhone);
            }
            
            if (!user) {
                logger.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);
                socket.emit('authError', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            const sessionExpiresAt = new Date(Date.now() + config.session.maxAge);
            await prismaService.updateSession(socket.id, {
                phone: normalizedPhone,
                authorized: true,
                name: user.name,
                telegramUserId: user.telegramUserId,
                expiresAt: sessionExpiresAt
            });

            // –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
            const userData = {
                phone: normalizedPhone,
                name: user.name,
                telegramUserId: user.telegramUserId
            };
            
            const longTermSessionData = createLongTermSession(userData);
            await prismaService.createLongTermSession(longTermSessionData);
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
            await cacheService.setLongTermSession(longTermSessionData.token, longTermSessionData);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            socket.emit('authSuccess', {
                phone: normalizedPhone,
                name: user.name,
                sessionToken: longTermSessionData.token
            });

            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${normalizedPhone} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤ verifyCode:', error);
            socket.emit('authError', { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    socket.on('logout', async () => {
        try {
            const sessionData = await getSessionBySocketId(socket.id);
            if (sessionData) {
                await prismaService.deleteSession(socket.id);
                await cacheService.invalidateSession(socket.id);
                socket.emit('logoutSuccess');
                logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã: ${socket.id}`);
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤ logout:', error);
        }
    });

    // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    socket.on('resetSession', async () => {
        try {
            const sessionData = await getSessionBySocketId(socket.id);
            if (sessionData) {
                const phone = sessionData.phone;
                
                // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                await prismaService.deleteSession(socket.id);
                await cacheService.invalidateSession(socket.id);
                
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É
                let user = await cacheService.getUserByPhone(phone);
                if (!user) {
                    user = await prismaService.findUserByPhone(phone);
                }
                
                if (user && user.telegramUserId) {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                    const smsCode = Math.floor(1000 + Math.random() * 9000).toString();
                    const expiresAt = new Date(Date.now() + 5 * 60 * 1000);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    await prismaService.createSmsCode({
                        phone: phone,
                        code: smsCode,
                        socketId: socket.id,
                        expiresAt: expiresAt
                    });
                    
                    // –ö—ç—à–∏—Ä—É–µ–º –∫–æ–¥
                    await cacheService.setSmsCode(phone, {
                        code: smsCode,
                        socketId: socket.id,
                        expiresAt: expiresAt
                    });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram
                    await telegramService.sendMessage(user.telegramUserId, 
                        `üîÑ –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏\n\n` +
                        `–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${smsCode}\n\n` +
                        `–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`
                    );
                    
                    logger.info(`–ö–æ–¥ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramUserId}: ${smsCode}`);
                }
                
                socket.emit('sessionReset');
                socket.emit('smsCodeSent', { phone });
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤ resetSession:', error);
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telegram –±–æ—Ç–∞ (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫)
function setupTelegramHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    bot.onText(/\/start$/, async (msg) => {
        const userId = msg.from.id;
        const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
        
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (${userId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`);
        
        const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n` +
            `üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n` +
            `1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n` +
            `2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n` +
            `3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"\n` +
            `4Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ QR-–∫–æ–¥–∞\n\n` +
            `üì± –ò–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`;
        
        const contactKeyboard = {
            reply_markup: {
                keyboard: [
                    [{
                        text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
                        request_contact: true
                    }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        };
        
        await bot.sendMessage(userId, welcomeMessage, contactKeyboard);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    bot.onText(/\/start (.+)/, async (msg, match) => {
    const authKey = match[1];
    const userId = msg.from.id;
    const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
    
    logger.info(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–ª—é—á–æ–º: ${authKey} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    logger.info(`–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: https://t.me/autor1z_bot?start=${authKey}`);
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∫–ª—é—á–∞
        let authData = await cacheService.getAuthKey(authKey);
        
        if (!authData) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            authData = await prismaService.findAuthKey(authKey);
        }
        
        if (!authData || authData.used) {
            await bot.sendMessage(userId, 
                `‚ùå –ù–æ–º–µ—Ä ${authData?.phone || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n` +
                `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n` +
                `1. –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞\n` +
                `2. –ù–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ\n` +
                `3. –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç)\n\n` +
                `–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: https://t.me/autor1z_bot?start=${authKey}`
            );
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–ª—é—á
        if (new Date() > authData.expiresAt) {
            await bot.sendMessage(userId, '‚è∞ –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢—Ä–µ–±—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await bot.sendMessage(userId, 
            `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${authData.phone}\n\n` +
            `–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n` +
            `üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
            {
                reply_markup: {
                    keyboard: [
                        [{
                            text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
                            request_contact: true
                        }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await cacheService.setAuthKey(authKey, {
            ...authData,
            pendingUserId: userId,
            pendingUserName: userName
        });
        
        logger.info(`–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –Ω–æ–º–µ—Ä–æ–º ${authData.phone}`);
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error);
    }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    bot.on('contact', async (msg) => {
        const userId = msg.from.id;
        const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
        const contact = msg.contact;
        
        logger.info(`–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} (${userId}): ${contact.phone_number}`);
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
        const contactKey = `contact_${userId}_${contact.phone_number}`;
        if (await cacheService.getContactProcessingStatus(contactKey)) {
            logger.warn(`–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
        await cacheService.setContactProcessingStatus(contactKey, true, 30); // 30 —Å–µ–∫—É–Ω–¥
        
        try {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
            const normalizedPhone = normalizePhoneNumber(contact.phone_number);
            logger.info(`–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${normalizedPhone}`);
            
            // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            const activeAuthKeys = await prismaService.findActiveAuthKeysByPhone(normalizedPhone);
            
            if (!activeAuthKeys || activeAuthKeys.length === 0) {
                logger.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);
                await bot.sendMessage(userId, 
                    `‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${normalizedPhone}.\n\n` +
                    `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n` +
                    `1. –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞\n` +
                    `2. –ù–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ\n` +
                    `3. –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª`
                );
                return;
            }
            
            logger.info(`–ù–∞–π–¥–µ–Ω–æ ${activeAuthKeys.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${normalizedPhone}`);
            
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
            const authKey = activeAuthKeys[0];
            const pendingAuth = {
                key: authKey.key,
                phone: authKey.phone,
                socketId: authKey.socketId,
                expiresAt: authKey.expiresAt
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–ª—é—á
            if (new Date() > pendingAuth.expiresAt) {
                await bot.sendMessage(userId, '‚è∞ –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return;
            }
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            await prismaService.markAuthKeyAsUsed(pendingAuth.key);
            await cacheService.invalidateAuthKey(pendingAuth.key);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            const sessionData = await getSessionBySocketId(pendingAuth.socketId);
            if (sessionData) {
                await prismaService.updateSession(pendingAuth.socketId, {
                    phone: normalizedPhone,
                    authorized: true,
                    name: userName,
                    telegramUserId: userId.toString()
                });
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let user = await prismaService.findUserByPhone(normalizedPhone);
                if (user) {
                    await prismaService.updateUser(normalizedPhone, {
                        name: userName,
                        telegramUserId: userId.toString(),
                        lastAuth: new Date()
                    });
                } else {
                    user = await prismaService.createUser({
                        phone: normalizedPhone,
                        name: userName,
                        telegramUserId: userId.toString(),
                        lastAuth: new Date()
                    });
                }
                
                // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await cacheService.warmUserCache(user);
                
                // –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é
                const longTermSessionData = createLongTermSession({
                    phone: normalizedPhone,
                    name: userName,
                    telegramUserId: userId.toString()
                });
                await prismaService.createLongTermSession(longTermSessionData);
                await cacheService.setLongTermSession(longTermSessionData.token, longTermSessionData);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                io.to(pendingAuth.socketId).emit('authSuccess', {
                    phone: normalizedPhone,
                    name: userName,
                    sessionToken: longTermSessionData.token
                });
                
                await bot.sendMessage(userId, 
                    `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n` +
                    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!\n` +
                    `–ù–æ–º–µ—Ä: ${normalizedPhone}`
                );
                
                logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${normalizedPhone} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç`);
            } else {
                await bot.sendMessage(userId, 
                    `‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞.`
                );
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
            await bot.sendMessage(userId, 
                `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
            );
        } finally {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            await cacheService.clearContactProcessingStatus(contactKey);
        }
    });
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
setInterval(async () => {
    try {
        await prismaService.cleanupExpiredSessions();
        await prismaService.cleanupExpiredSmsCodes();
        await prismaService.cleanupExpiredAuthKeys();
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}, config.session.cleanupInterval);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
async function startServer() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–æ–∫
        systemChecks = new SystemChecks();
        startupChecklist = new StartupChecklist();

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        startupChecklist.addCheck(
            '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
            () => systemChecks.checkEnvironmentVariables(),
            true
        );

        startupChecklist.addCheck(
            '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            () => systemChecks.checkDatabaseConnection(),
            true
        );

        startupChecklist.addCheck(
            '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            () => systemChecks.checkDatabaseSchema(),
            true
        );

        startupChecklist.addCheck(
            'In-memory –∫—ç—à',
            () => systemChecks.checkCacheConnection(),
            false // –ö—ç—à –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
        );

        startupChecklist.addCheck(
            'Telegram –±–æ—Ç',
            () => systemChecks.checkTelegramBot(),
            true
        );

        startupChecklist.addCheck(
            '–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
            () => systemChecks.checkFileSystem(),
            true
        );

        startupChecklist.addCheck(
            '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤',
            () => systemChecks.checkPorts(),
            true
        );

        startupChecklist.addCheck(
            '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
            () => systemChecks.checkDependencies(),
            true
        );

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const checksPassed = await startupChecklist.runChecks();
        
        if (!checksPassed) {
            logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.');
            process.exit(1);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        prismaService = new PrismaService();
        cacheService = new CacheService();
        telegramService = new TelegramService();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞ –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        setTimeout(() => {
            const cacheStatus = cacheService.getCacheStatus();
            if (cacheStatus.isConnected) {
                logger.info('‚úÖ In-memory –∫—ç—à –∞–∫—Ç–∏–≤–µ–Ω');
            } else {
                logger.warn(`‚ö†Ô∏è –ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞–∑–º–µ—Ä: ${cacheStatus.fallbackCacheSize})`);
            }
        }, 2000);

        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        bot = telegramService.getBot();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞
        setupTelegramHandlers();

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await prismaService.connect();
        logger.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        
        // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (shouldClearDatabase || shouldResetAll) {
            logger.warn('üßπ –†–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            const result = await prismaService.clearAllData();
            logger.warn(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${JSON.stringify(result)}`);
        } else if (shouldResetUsers) {
            logger.warn('üßπ –†–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            const result = await prismaService.clearUsers();
            logger.warn(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${JSON.stringify(result)}`);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.listen(config.port, () => {
            logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
            logger.info(`üì± Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω`);
            logger.info(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${config.port} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
            logger.info(`‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    logger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    errorHandler.handleCriticalError(error, 'uncaughtException');
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    logger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', { reason, promise });
    errorHandler.handleCriticalError(reason, 'unhandledRejection');
});

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∫–ª—é—á–µ–Ω–∏–π
let isShuttingDown = false;

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
async function gracefulShutdown(signal) {
    if (isShuttingDown) {
        logger.warn('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º...');
        return;
    }
    
    isShuttingDown = true;
    logger.info(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...`);
    
    const shutdownTimeout = setTimeout(() => {
        logger.error('‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
        process.exit(1);
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
    
    try {
        // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        logger.info('üì° –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
        server.close(() => {
            logger.info('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
        
        // 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        logger.info('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        io.emit('serverShutdown', { 
            message: '–°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.',
            timestamp: new Date().toISOString()
        });
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        io.disconnectSockets();
        io.close(() => {
            logger.info('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
        
        // 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        if (telegramService) {
            logger.info('ü§ñ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...');
            telegramService.stopPolling();
            logger.info('‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        
        // 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if (prismaService) {
            logger.info('üóÑÔ∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
            await prismaService.disconnect();
            logger.info('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã');
        }
        
        // 5. –û—á–∏—â–∞–µ–º –∫—ç—à
        if (cacheService) {
            logger.info('üßπ –û—á–∏—â–∞–µ–º –∫—ç—à...');
            try {
                await cacheService.clearAll();
                logger.info('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω');
            } catch (error) {
                logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error.message);
            }
        }
        
        clearTimeout(shutdownTimeout);
        logger.info('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        process.exit(0);
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–∏:', error);
        clearTimeout(shutdownTimeout);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => gracefulShutdown('SIGINT'));   // Ctrl+C
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // kill –∫–æ–º–∞–Ω–¥–∞
process.on('SIGUSR2', () => gracefulShutdown('SIGUSR2')); // nodemon restart

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

module.exports = { app, server, io };

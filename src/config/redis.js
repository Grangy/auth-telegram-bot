const Redis = require('ioredis');
const config = require('./config');

class RedisService {
    constructor() {
        this.isConnected = false;
        this.fallbackCache = new Map(); // In-memory fallback
        this.retryCount = 0;
        this.maxRetries = 5;
        
        // –ü–æ–¥–∞–≤–ª—è–µ–º unhandled error events –¥–ª—è Redis
        this.setupErrorHandling();
        this.initializeRedis();
    }

    setupErrorHandling() {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–∞–≤–ª—è–µ–º unhandled error events –æ—Ç ioredis
        const originalEmit = process.emit;
        process.emit = function(event, ...args) {
            // –ü–æ–¥–∞–≤–ª—è–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ Redis
            if (event === 'unhandledRejection' && args[0]) {
                const error = args[0];
                if (error.message && (
                    error.message.includes('ECONNREFUSED') ||
                    error.message.includes('Redis') ||
                    error.message.includes('ioredis')
                )) {
                    console.warn('‚ö†Ô∏è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                    return false;
                }
            }
            return originalEmit.apply(this, arguments);
        };

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∞–≤–ª—è–µ–º uncaughtException –¥–ª—è Redis
        process.on('uncaughtException', (error) => {
            if (error.message && (
                error.message.includes('ECONNREFUSED') ||
                error.message.includes('Redis') ||
                error.message.includes('ioredis')
            )) {
                console.warn('‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                return;
            }
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            console.error('Uncaught Exception:', error);
        });
    }

    initializeRedis() {
        try {
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ REDIS_URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (Render, Redis Cloud)
            const redisConfig = process.env.REDIS_URL 
                ? { url: process.env.REDIS_URL }
                : {
                    host: process.env.REDIS_HOST || 'localhost',
                    port: process.env.REDIS_PORT || 6379,
                    password: process.env.REDIS_PASSWORD || undefined
                };

            this.client = new Redis({
                ...redisConfig,
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                lazyConnect: true,
                connectTimeout: 2000,
                commandTimeout: 2000,
                retryDelayOnFailover: 0,
                maxRetriesPerRequest: 0,
                retryDelayOnClusterDown: 0,
                enableReadyCheck: false,
                enableAutoPipelining: false,
                enableOfflineQueue: false,
                // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ retry –º–µ—Ö–∞–Ω–∏–∑–º—ã
                retryDelayOnFailover: 0,
                maxRetriesPerRequest: 0,
                // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                autoResubscribe: false,
                autoResendUnfulfilledCommands: false
            });

            this.client.on('connect', () => {
                console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.isConnected = true;
                this.retryCount = 0;
            });

            this.client.on('ready', () => {
                console.log('‚úÖ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                this.isConnected = true;
            });

            this.client.on('error', (error) => {
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–∞–≤–ª—è–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ Redis
                if (error.code === 'ECONNREFUSED' || error.message.includes('ECONNREFUSED')) {
                    console.warn('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—ç—à');
                    this.isConnected = false;
                    return;
                }
                
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ Redis (–∏—Å–ø–æ–ª—å–∑—É–µ–º fallback):', error.message);
                this.isConnected = false;
            });

            this.client.on('close', () => {
                console.warn('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ');
                this.isConnected = false;
            });

            this.client.on('reconnecting', () => {
                console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...');
                this.retryCount++;
            });

        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
            this.isConnected = false;
        }
    }

    handleRedisError(error) {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (error.code === 'ECONNREFUSED' || error.message.includes('ECONNREFUSED')) {
            console.warn('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—ç—à. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
            this.isConnected = false;
            return;
        }

        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        console.warn('‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—ç—à. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
        this.isConnected = false;
    }

    async get(key) {
        if (this.isConnected && this.client) {
            try {
                const value = await this.client.get(key);
                return value ? JSON.parse(value) : null;
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
                this.isConnected = false;
            }
        }
        
        // Fallback to in-memory cache
        const fallbackValue = this.fallbackCache.get(key);
        if (fallbackValue && fallbackValue.expiresAt > Date.now()) {
            return fallbackValue.data;
        } else if (fallbackValue) {
            this.fallbackCache.delete(key);
        }
        return null;
    }

    async set(key, value, ttl = 3600) {
        if (this.isConnected && this.client) {
            try {
                await this.client.setex(key, ttl, JSON.stringify(value));
                return true;
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
                this.isConnected = false;
            }
        }
        
        // Fallback to in-memory cache
        try {
            this.fallbackCache.set(key, {
                data: value,
                expiresAt: Date.now() + (ttl * 1000)
            });
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ fallback –∫—ç—à:', error);
            return false;
        }
    }

    async del(key) {
        if (this.isConnected && this.client) {
            try {
                await this.client.del(key);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
                this.isConnected = false;
            }
        }
        
        // Fallback to in-memory cache
        this.fallbackCache.delete(key);
        return true;
    }

    async exists(key) {
        if (this.isConnected && this.client) {
            try {
                const result = await this.client.exists(key);
                return result === 1;
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
                this.isConnected = false;
            }
        }
        
        // Fallback to in-memory cache
        const fallbackValue = this.fallbackCache.get(key);
        return fallbackValue && fallbackValue.expiresAt > Date.now();
    }

    async flush() {
        if (this.isConnected && this.client) {
            try {
                await this.client.flushall();
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
                this.isConnected = false;
            }
        }
        
        // Fallback to in-memory cache
        this.fallbackCache.clear();
        return true;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è fallback –∫—ç—à–∞
    async getAllKeys() {
        if (this.isConnected && this.client) {
            try {
                return await this.client.keys('*');
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
                this.isConnected = false;
            }
        }
        
        // Fallback to in-memory cache
        return Array.from(this.fallbackCache.keys());
    }

    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ fallback –∫—ç—à–∞
    cleanupFallbackCache() {
        const now = Date.now();
        for (const [key, value] of this.fallbackCache.entries()) {
            if (value.expiresAt <= now) {
                this.fallbackCache.delete(key);
            }
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    getConnectionStatus() {
        return {
            isConnected: this.isConnected,
            retryCount: this.retryCount,
            fallbackCacheSize: this.fallbackCache.size
        };
    }
}

module.exports = RedisService;

const TelegramBot = require('node-telegram-bot-api');
const logger = require('../utils/logger');
const config = require('../config/config');

class TelegramService {
    constructor() {
        this.bot = null;
        this.errorCount = 0;
        this.maxErrors = 3;
        this.init();
    }

    init() {
        try {
            this.bot = new TelegramBot(config.botToken, { 
                polling: {
                    interval: 1000,
                    autoStart: false
                }
            });
            
            this.setupErrorHandling();
            this.setupEventHandlers();
            
            // –ó–∞–ø—É—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                this.startPolling();
            }, 2000);
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
            throw error;
        }
    }

    setupErrorHandling() {
        this.bot.on('error', (error) => {
            this.errorCount++;
            logger.error(`–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞ (${this.errorCount}/${this.maxErrors}):`, error.message);
            
            if (error.message.includes('Conflict: terminated by other getUpdates request')) {
                this.handleConflictError();
            }
            
            if (this.errorCount >= this.maxErrors) {
                logger.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫. –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.');
                return;
            }
        });
        
        this.bot.on('polling_error', (error) => {
            logger.error('–û—à–∏–±–∫–∞ polling:', error.message);
        });
    }

    handleConflictError() {
        logger.info('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling...');
        try {
            this.bot.stopPolling();
            logger.info('Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
            setTimeout(() => {
                try {
                    this.bot.startPolling();
                    logger.info('Polling –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
                    this.errorCount = 0;
                } catch (restartError) {
                    logger.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ polling:', restartError.message);
                }
            }, 10000);
        } catch (stopError) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling:', stopError.message);
        }
    }

    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        this.bot.onText(/\/start (.+)/, (msg, match) => {
            const authKey = match[1];
            const userId = msg.from.id;
            const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
            
            logger.info(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–ª—é—á–æ–º: ${authKey} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.bot.sendMessage(userId, 
                `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n` +
                `–ö–ª—é—á: ${authKey}\n` +
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n\n` +
                `–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`
            );
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', (msg) => {
            if (msg.text && msg.text.startsWith('/start')) return; // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
            
            const userId = msg.from.id;
            const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const phoneRegex = /^\+?[1-9]\d{1,14}$/;
            if (phoneRegex.test(msg.text)) {
                logger.info(`–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${msg.text}`);
                
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                this.bot.sendMessage(userId, 
                    `üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${msg.text}\n\n` +
                    `–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.`
                );
            }
        });
    }

    startPolling() {
        try {
            this.bot.startPolling();
            logger.info('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
        }
    }

    stopPolling() {
        try {
            this.bot.stopPolling();
            logger.info('Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling:', error.message);
        }
    }

    sendMessage(chatId, message) {
        return this.bot.sendMessage(chatId, message).catch(error => {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
            throw error;
        });
    }

    getBot() {
        return this.bot;
    }
}

module.exports = TelegramService;

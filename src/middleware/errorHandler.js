const logger = require('../utils/logger');

class ErrorHandler {
    constructor() {
        this.errorCounts = new Map();
        this.maxRetries = 3;
        this.retryDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async handleDatabaseError(error, operation, context = {}) {
        const errorKey = `${operation}_${error.code || 'unknown'}`;
        const count = this.errorCounts.get(errorKey) || 0;
        
        logger.error(`–û—à–∏–±–∫–∞ –ë–î –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation}:`, {
            error: error.message,
            code: error.code,
            operation,
            context,
            retryCount: count
        });

        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if (error.code === 'P1001' || error.message.includes('connection')) {
            return this.handleConnectionError(error, operation, context);
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        if (error.code === 'P2002' || error.code === 'P2010') {
            return this.handleValidationError(error, operation, context);
        }

        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        if (count < this.maxRetries) {
            this.errorCounts.set(errorKey, count + 1);
            await this.delay(this.retryDelay * (count + 1));
            return { shouldRetry: true, error };
        }

        return { shouldRetry: false, error };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async handleConnectionError(error, operation, context) {
        logger.warn(`–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation}`, {
            error: error.message,
            operation,
            context
        });

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        return { shouldRetry: false, error, needsReconnect: true };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    handleValidationError(error, operation, context) {
        logger.error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation}:`, {
            error: error.message,
            code: error.code,
            operation,
            context
        });

        return { shouldRetry: false, error, isValidationError: true };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis
    async handleRedisError(error, operation, context = {}) {
        logger.warn(`–û—à–∏–±–∫–∞ Redis –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation}:`, {
            error: error.message,
            operation,
            context
        });

        // Redis –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        return { shouldRetry: false, error, isNonCritical: true };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
    handleTelegramError(error, operation, context = {}) {
        logger.error(`–û—à–∏–±–∫–∞ Telegram –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation}:`, {
            error: error.message,
            operation,
            context
        });

        return { shouldRetry: false, error, isTelegramError: true };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
    handleGeneralError(error, operation, context = {}) {
        logger.error(`–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation}:`, {
            error: error.message,
            stack: error.stack,
            operation,
            context
        });

        return { shouldRetry: false, error };
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async handleError(error, operation, context = {}) {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if (error.name === 'PrismaClientKnownRequestError' || 
                error.name === 'PrismaClientValidationError') {
                return await this.handleDatabaseError(error, operation, context);
            }
            
            if (error.message.includes('Redis') || error.message.includes('ECONNREFUSED')) {
                return await this.handleRedisError(error, operation, context);
            }
            
            if (error.message.includes('Telegram') || error.message.includes('bot')) {
                return this.handleTelegramError(error, operation, context);
            }

            return this.handleGeneralError(error, operation, context);
        } catch (handlerError) {
            logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫:', handlerError);
            return { shouldRetry: false, error: handlerError };
        }
    }

    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
    resetErrorCounts() {
        this.errorCounts.clear();
        logger.info('–°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
    getErrorStats() {
        const stats = {};
        for (const [key, count] of this.errorCounts) {
            stats[key] = count;
        }
        return stats;
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    handleCriticalError(error, operation, context = {}) {
        logger.error(`üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation}:`, {
            error: error.message,
            stack: error.stack,
            operation,
            context,
            timestamp: new Date().toISOString()
        });

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack, email, etc.
        
        return { shouldRetry: false, error, isCritical: true };
    }
}

module.exports = new ErrorHandler();

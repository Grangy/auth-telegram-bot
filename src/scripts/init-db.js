#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const logger = require('../utils/logger');

class DatabaseInitializer {
    constructor() {
        this.prisma = new PrismaClient();
    }

    async initialize() {
        try {
            console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await this.testConnection();
            
            // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            await this.createIndexes();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            await this.validateSchema();
            
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        } finally {
            await this.prisma.$disconnect();
        }
    }

    async testConnection() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            await this.prisma.$connect();
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`);
        }
    }

    async createIndexes() {
        try {
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
            
            // MongoDB –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            // –ù–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π
            const collections = await this.prisma.$runCommandRaw({ listCollections: 1 });
            console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collections.cursor.firstBatch.map(c => c.name));
            
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        } catch (error) {
            console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
        }
    }

    async validateSchema() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            const userCount = await this.prisma.user.count();
            const sessionCount = await this.prisma.session.count();
            const authKeyCount = await this.prisma.authKey.count();
            const smsCodeCount = await this.prisma.smsCode.count();
            const longTermSessionCount = await this.prisma.longTermSession.count();
            const cacheEntryCount = await this.prisma.cacheEntry.count();
            
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
            console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}`);
            console.log(`   üîê –°–µ—Å—Å–∏–∏: ${sessionCount}`);
            console.log(`   üîë –ö–ª—é—á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authKeyCount}`);
            console.log(`   üì± SMS –∫–æ–¥—ã: ${smsCodeCount}`);
            console.log(`   ‚è∞ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏: ${longTermSessionCount}`);
            console.log(`   üíæ –ö—ç—à –∑–∞–ø–∏—Å–∏: ${cacheEntryCount}`);
            
            console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î:', error.message);
            throw error;
        }
    }

    async cleanup() {
        try {
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
            
            const now = new Date();
            
            // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏
            const expiredSessions = await this.prisma.session.deleteMany({
                where: { expiresAt: { lt: now } }
            });
            
            // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const expiredAuthKeys = await this.prisma.authKey.deleteMany({
                where: { expiresAt: { lt: now } }
            });
            
            // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ SMS –∫–æ–¥—ã
            const expiredSmsCodes = await this.prisma.smsCode.deleteMany({
                where: { expiresAt: { lt: now } }
            });
            
            // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            const expiredLongTermSessions = await this.prisma.longTermSession.deleteMany({
                where: { expiresAt: { lt: now } }
            });
            
            // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à –∑–∞–ø–∏—Å–∏
            const expiredCacheEntries = await this.prisma.cacheEntry.deleteMany({
                where: { expiresAt: { lt: now } }
            });
            
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:');
            console.log(`   üîê –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏: ${expiredSessions.count}`);
            console.log(`   üîë –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏: ${expiredAuthKeys.count}`);
            console.log(`   üì± –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ SMS –∫–æ–¥—ã: ${expiredSmsCodes.count}`);
            console.log(`   ‚è∞ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏: ${expiredLongTermSessions.count}`);
            console.log(`   üíæ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à –∑–∞–ø–∏—Å–∏: ${expiredCacheEntries.count}`);
            
        } catch (error) {
            console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function main() {
    const initializer = new DatabaseInitializer();
    
    try {
        await initializer.initialize();
        
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if (process.argv.includes('--cleanup')) {
            await initializer.cleanup();
        }
        
        console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = DatabaseInitializer;

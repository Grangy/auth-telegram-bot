const logger = require('./logger');

class StartupChecklist {
    constructor() {
        this.checks = [];
        this.results = [];
    }

    // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
    addCheck(name, checkFunction, required = true) {
        this.checks.push({
            name,
            checkFunction,
            required,
            status: 'pending'
        });
    }

    // –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    async runChecks() {
        console.log('\nüîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã...\n');
        
        let allPassed = true;
        let criticalFailed = false;

        for (let i = 0; i < this.checks.length; i++) {
            const check = this.checks[i];
            const checkNumber = i + 1;
            const totalChecks = this.checks.length;
            
            try {
                console.log(`[${checkNumber}/${totalChecks}] üîç ${check.name}...`);
                
                const result = await check.checkFunction();
                check.status = 'passed';
                check.result = result;
                
                console.log(`[${checkNumber}/${totalChecks}] ‚úÖ ${check.name} - OK`);
                
                if (result && typeof result === 'object') {
                    if (result.message) console.log(`    üí¨ ${result.message}`);
                    if (result.details) console.log(`    üìä ${result.details}`);
                }
                
            } catch (error) {
                check.status = 'failed';
                check.error = error;
                
                if (check.required) {
                    criticalFailed = true;
                    console.log(`[${checkNumber}/${totalChecks}] ‚ùå ${check.name} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê`);
                    console.log(`    üí• ${error.message}`);
                } else {
                    console.log(`[${checkNumber}/${totalChecks}] ‚ö†Ô∏è  ${check.name} - –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï`);
                    console.log(`    ‚ö†Ô∏è  ${error.message}`);
                }
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        this.printSummary();
        
        if (criticalFailed) {
            console.log('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´!');
            console.log('üö´ –°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.');
            console.log('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n');
            return false;
        }

        if (allPassed) {
            console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
            console.log('üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.\n');
        }

        return true;
    }

    // –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    printSummary() {
        console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
        console.log('‚ïê'.repeat(50));
        
        const passed = this.checks.filter(c => c.status === 'passed').length;
        const failed = this.checks.filter(c => c.status === 'failed').length;
        const critical = this.checks.filter(c => c.status === 'failed' && c.required).length;
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}`);
        console.log(`‚ùå –û—à–∏–±–∫–∏: ${failed}`);
        console.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: ${critical}`);
        
        if (failed > 0) {
            console.log('\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:');
            this.checks
                .filter(c => c.status === 'failed')
                .forEach(check => {
                    const status = check.required ? 'üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø' : '‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï';
                    console.log(`   ${status}: ${check.name}`);
                    console.log(`      ${check.error.message}`);
                });
        }
        
        console.log('‚ïê'.repeat(50));
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
    getResults() {
        return this.checks.map(check => ({
            name: check.name,
            status: check.status,
            required: check.required,
            result: check.result,
            error: check.error
        }));
    }
}

module.exports = StartupChecklist;

#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/health-check.js [--port 3000]
 */

const http = require('http');
const { URL } = require('url');

const DEFAULT_PORT = 3000;
const DEFAULT_HOST = 'localhost';

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const port = args.includes('--port') ? 
    parseInt(args[args.indexOf('--port') + 1]) || DEFAULT_PORT : 
    DEFAULT_PORT;

const host = args.includes('--host') ? 
    args[args.indexOf('--host') + 1] : 
    DEFAULT_HOST;

console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ ${host}:${port}...`);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
async function checkHealth() {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: host,
            port: port,
            path: '/health',
            method: 'GET',
            timeout: 5000
        };

        const req = http.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const health = JSON.parse(data);
                    resolve({
                        status: res.statusCode,
                        health: health,
                        responseTime: Date.now() - startTime
                    });
                } catch (error) {
                    reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error.message}`));
                }
            });
        });

        req.on('error', (error) => {
            reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
        });

        req.on('timeout', () => {
            req.destroy();
            reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (5 —Å–µ–∫—É–Ω–¥)'));
        });

        const startTime = Date.now();
        req.end();
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        const result = await checkHealth();
        
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (${result.responseTime}ms)`);
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${result.status}`);
        console.log(`‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(result.health.uptime)} —Å–µ–∫—É–Ω–¥`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        const services = result.health.services;
        console.log('\nüîß –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:');
        console.log(`   üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${services.database ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üß† –ö—ç—à: ${services.cache ? '‚úÖ' : '‚ùå'}`);
        console.log(`   ü§ñ Telegram: ${services.telegram ? '‚úÖ' : '‚ùå'}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        const allServicesOk = Object.values(services).every(status => status);
        
        if (result.status === 200 && allServicesOk) {
            console.log('\nüéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            process.exit(0);
        } else {
            console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏');
            process.exit(1);
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${error.message}`);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
    console.log('\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main();

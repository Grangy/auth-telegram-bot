#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã SMS –∫–æ–¥–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/test-sms-codes.js
 */

const PrismaService = require('../src/services/PrismaService');
const CacheService = require('../src/services/CacheService');
const logger = require('../src/utils/logger');

async function testSmsCodes() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMS –∫–æ–¥–æ–≤...');
    
    const prismaService = new PrismaService();
    const cacheService = new CacheService();
    
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await prismaService.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        const testPhone = '+79817750018';
        const testCode = '1234';
        
        // 1. –°–æ–∑–¥–∞–µ–º SMS –∫–æ–¥
        console.log(`\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ SMS –∫–æ–¥–∞ –¥–ª—è ${testPhone}...`);
        const smsData = {
            phone: testPhone,
            code: testCode,
            socketId: 'test-socket',
            expiresAt: new Date(Date.now() + 5 * 60 * 1000)
        };
        
        const createdSms = await prismaService.createSmsCode(smsData);
        console.log('‚úÖ SMS –∫–æ–¥ —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', createdSms);
        
        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        console.log(`\n2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à...`);
        await cacheService.setSmsCode(testPhone, {
            code: testCode,
            socketId: 'test-socket',
            expiresAt: new Date(Date.now() + 5 * 60 * 1000)
        });
        console.log('‚úÖ SMS –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à');
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        console.log(`\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞...`);
        const cachedData = await cacheService.getSmsCode(testPhone);
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:', cachedData);
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        console.log(`\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î...`);
        const dbData = await prismaService.findSmsCode(testPhone);
        console.log('üóÑÔ∏è –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:', dbData);
        
        // 5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–¥—ã
        console.log(`\n5Ô∏è‚É£ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤...`);
        console.log(`–û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥: "${testCode}"`);
        console.log(`–ö–æ–¥ –∏–∑ –∫—ç—à–∞: "${cachedData?.code}"`);
        console.log(`–ö–æ–¥ –∏–∑ –ë–î: "${dbData?.code}"`);
        console.log(`–ö—ç—à === –û–∂–∏–¥–∞–µ–º—ã–π: ${cachedData?.code === testCode}`);
        console.log(`–ë–î === –û–∂–∏–¥–∞–µ–º—ã–π: ${dbData?.code === testCode}`);
        
        // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞
        console.log(`\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞...`);
        const testInputs = ['1234', ' 1234 ', '1234\n', '\t1234\t'];
        
        for (const input of testInputs) {
            console.log(`–í–≤–æ–¥: "${input}" -> –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${cachedData?.code === input}`);
        }
        
        // 7. –û—á–∏—Å—Ç–∫–∞
        console.log(`\n7Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...`);
        await prismaService.markSmsCodeAsUsed(testPhone);
        await cacheService.invalidateSmsCode(testPhone);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        
        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
        await prismaService.disconnect();
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testSmsCodes();

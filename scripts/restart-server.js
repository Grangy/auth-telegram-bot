#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/restart-server.js [--port 3000] [--wait 5]
 */

const { spawn } = require('child_process');
const http = require('http');
const fs = require('fs');
const path = require('path');

const DEFAULT_PORT = 3000;
const DEFAULT_WAIT_TIME = 5; // —Å–µ–∫—É–Ω–¥

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const port = args.includes('--port') ? 
    parseInt(args[args.indexOf('--port') + 1]) || DEFAULT_PORT : 
    DEFAULT_PORT;

const waitTime = args.includes('--wait') ? 
    parseInt(args[args.indexOf('--wait') + 1]) || DEFAULT_WAIT_TIME : 
    DEFAULT_WAIT_TIME;

console.log(`üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
async function waitForServer() {
    return new Promise((resolve, reject) => {
        const maxAttempts = 30; // 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 1 —Å–µ–∫—É–Ω–¥–µ
        let attempts = 0;
        
        const checkServer = () => {
            attempts++;
            
            const req = http.request({
                hostname: 'localhost',
                port: port,
                path: '/health',
                method: 'GET',
                timeout: 1000
            }, (res) => {
                if (res.statusCode === 200) {
                    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');
                    resolve();
                } else {
                    if (attempts < maxAttempts) {
                        setTimeout(checkServer, 1000);
                    } else {
                        reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥'));
                    }
                }
            });
            
            req.on('error', () => {
                if (attempts < maxAttempts) {
                    setTimeout(checkServer, 1000);
                } else {
                    reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É'));
                }
            });
            
            req.on('timeout', () => {
                req.destroy();
                if (attempts < maxAttempts) {
                    setTimeout(checkServer, 1000);
                } else {
                    reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'));
                }
            });
            
            req.end();
        };
        
        checkServer();
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ SIGTERM –¥–ª—è graceful shutdown
async function gracefulShutdown() {
    return new Promise((resolve) => {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ SIGTERM –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è...');
        
        const req = http.request({
            hostname: 'localhost',
            port: port,
            path: '/health',
            method: 'GET',
            timeout: 2000
        }, (res) => {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
            if (res.statusCode === 200) {
                console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
                setTimeout(resolve, waitTime * 1000);
            } else {
                resolve();
            }
        });
        
        req.on('error', () => {
            console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
            resolve();
        });
        
        req.on('timeout', () => {
            console.log('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞');
            resolve();
        });
        
        req.end();
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
        await waitForServer();
        
        // 2. Graceful shutdown
        await gracefulShutdown();
        
        // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
        const serverProcess = spawn('node', ['server.js'], {
            stdio: 'inherit',
            cwd: process.cwd()
        });
        
        // 4. –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
        await waitForServer();
        
        console.log('‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        process.on('SIGINT', () => {
            console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
            serverProcess.kill('SIGINT');
            process.exit(0);
        });
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: ${error.message}`);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
    console.log('\nüõë –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main();
